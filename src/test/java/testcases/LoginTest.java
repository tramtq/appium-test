package testcases;

import base.BaseTest;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import pages.LoginPage;
import utils.PhoneValidator;
import utils.SoftAssertPlus;
import utils.DataGenerator;

import java.io.IOException;
import java.lang.reflect.Method;

public class LoginTest extends BaseTest {

    private LoginPage loginPage;
    private SoftAssertPlus softAssert;

    @BeforeMethod
    public void setUp(Method method) {
        loginPage = new LoginPage(driver);
        waitUntilActivityContains("UserAccountActivity");

        // T·∫°o softAssert v√† g·∫Øn th√¥ng tin testcase
        softAssert = new SoftAssertPlus(driver);
        softAssert.setTestCaseInfo(this.getClass().getSimpleName(), method.getName());
    }

    @Test
    public void testPlaceholder() {
        String actualPlaceholder = loginPage.getPlaceholderText();
        softAssert.assertEquals(
                actualPlaceholder,
                "Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ho·∫∑c email",
                "‚ùå Sai n·ªôi dung placeholder",
                "‚úÖ Placeholder hi·ªÉn th·ªã ƒë√∫ng"
        );

        softAssert.assertAllWithLog();
    }

    @Test
    public void testClickInputField() {
        loginPage.focusInputField();
        boolean isKeyboardVisible = loginPage.isKeyboardVisible();
        softAssert.assertTrue(
                isKeyboardVisible,
                "‚ùå B√†n ph√≠m kh√¥ng hi·ªÉn th·ªã sau khi focus input",
                "‚úÖ B√†n ph√≠m ƒë√£ hi·ªÉn th·ªã khi focus input"
        );
        softAssert.assertAllWithLog();
    }

    @Test
    public void testEmptyInput() {
        loginPage.focusInputField();
        loginPage.enterLoginInput("");
        loginPage.tapOutsideInput();

        boolean errorDisplayed = loginPage.isErrorDisplayed();
        softAssert.assertTrue(
                errorDisplayed,
                "‚ùå Kh√¥ng hi·ªÉn th·ªã text l·ªói",
                "‚úÖ C√≥ hi·ªÉn th·ªã text l·ªói"
        );

        if (errorDisplayed) {
            String actualError = loginPage.getErrorMessageText();
            softAssert.assertEquals(
                    actualError,
                    "Vui l√≤ng kh√¥ng ƒë·ªÉ tr·ªëng √¥ nh·∫≠p.",
                    "‚ùå Sai n·ªôi dung text l·ªói",
                    "‚úÖ N·ªôi dung l·ªói hi·ªÉn th·ªã ƒë√∫ng"
            );
        }

        boolean isButtonEnabled = loginPage.isContinueButtonEnabled();
        softAssert.assertFalse(
                isButtonEnabled,
                "‚ùå N√∫t Ti·∫øp t·ª•c enable",
                "‚úÖ N√∫t Ti·∫øp t·ª•c disable"
        );

        softAssert.assertAllWithLog();
    }

    @Test
    public void testInvalidPhoneFormat() {
        String phone = DataGenerator.generateInvalidPhoneNumber();
        softAssert.logInputData(phone);
        loginPage.focusInputField();
        loginPage.enterLoginInput(phone);
        loginPage.tapOutsideInput();

        boolean errorDisplayed = loginPage.isErrorDisplayed();
        softAssert.assertTrue(
                errorDisplayed,
                "‚ùå Kh√¥ng hi·ªÉn th·ªã text l·ªói",
                "‚úÖ C√≥ hi·ªÉn th·ªã text l·ªói"
        );

        String actualError = loginPage.getErrorMessageText();
        softAssert.assertEquals(
                actualError,
                "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Vui l√≤ng th·ª≠ l·∫°i.",
                "‚ùå Sai n·ªôi dung text l·ªói",
                "‚úÖ N·ªôi dung l·ªói ƒë√∫ng"
        );

        boolean isButtonEnabled = loginPage.isContinueButtonEnabled();
        softAssert.assertFalse(
                isButtonEnabled,
                "‚ùå N√∫t Ti·∫øp t·ª•c enable",
                "‚úÖ N√∫t Ti·∫øp t·ª•c b·ªã disable"
        );

        softAssert.assertAllWithLog();
    }

    @Test
    public void testNonVietnamesePhone() {
        String phone2 = DataGenerator.generateForeignPhoneNumberWithoutPlus();
        softAssert.logInputData(phone2);

        loginPage.focusInputField();
        loginPage.enterLoginInput(phone2);
        loginPage.tapOutsideInput();

        boolean errorDisplayed = loginPage.isErrorDisplayed();
        softAssert.assertTrue(
                errorDisplayed,
                "‚ùå Kh√¥ng hi·ªÉn th·ªã text l·ªói",
                "‚úÖ C√≥ hi·ªÉn th·ªã text l·ªói"
        );

        String actualError = loginPage.getErrorMessageText();
        softAssert.assertEquals(
                actualError,
                "Ch∆∞a h·ªó tr·ª£ s·ªë ƒëi·ªán tho·∫°i ngo√†i m√£ v√πng Vi·ªát Nam. Vui l√≤ng th·ª≠ l·∫°i.",
                "‚ùå Sai n·ªôi dung text l·ªói",
                "‚úÖ N·ªôi dung l·ªói ƒë√∫ng"
        );

        boolean isButtonEnabled = loginPage.isContinueButtonEnabled();
        softAssert.assertFalse(
                isButtonEnabled,
                "‚ùå N√∫t Ti·∫øp t·ª•c ƒë∆∞·ª£c enable",
                "‚úÖ N√∫t Ti·∫øp t·ª•c b·ªã disable"
        );

        softAssert.assertAllWithLog();
    }

    @Test
    public void testInvalidEmailFormat() {
        String invalidEmail = DataGenerator.generateInvalidEmail();
        softAssert.logInputData(invalidEmail);

        loginPage.focusInputField();
        loginPage.enterLoginInput(invalidEmail);
        loginPage.tapOutsideInput();

        boolean errorDisplayed = loginPage.isErrorDisplayed();
        softAssert.assertTrue(
                errorDisplayed,
                "‚ùå Kh√¥ng hi·ªÉn th·ªã text l·ªói",
                "‚úÖ C√≥ hi·ªÉn th·ªã text l·ªói"
        );

        String actualError = loginPage.getErrorMessageText();
        softAssert.assertEquals(
                actualError,
                "ƒê·ªãa ch·ªâ mail kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Vui l√≤ng th·ª≠ l·∫°i.",
                "‚ùå Sai n·ªôi dung text l·ªói",
                "‚úÖ N·ªôi dung l·ªói ƒë√∫ng"
        );
        boolean isButtonEnabled = loginPage.isContinueButtonEnabled();
        softAssert.assertFalse(
                isButtonEnabled,
                "‚ùå N√∫t Ti·∫øp t·ª•c ƒë∆∞·ª£c enable",
                "‚úÖ N√∫t Ti·∫øp t·ª•c b·ªã disable"
        );

        softAssert.assertAllWithLog();
    }

    @Test
    public void testValidPhone() throws IOException {
        String validPhone = DataGenerator.generateValidPhoneNumber();
        softAssert.logInputData(validPhone);

        loginPage.focusInputField();
        loginPage.enterLoginInput(validPhone);
        loginPage.tapOutsideInput();

        boolean errorDisplayed = loginPage.isErrorDisplayed();
        softAssert.assertFalse(
                errorDisplayed,
                "‚ùå C√≥ hi·ªÉn th·ªã l·ªói",
                "‚úÖ Kh√¥ng hi·ªÉn th·ªã l·ªói"
        );

        boolean isIconShown = loginPage.isSuccessIconDisplayed();
        softAssert.assertTrue(
                isIconShown,
                "‚ùå Kh√¥ng hi·ªÉn th·ªã icon validate",
                "‚úÖ Hi·ªÉn th·ªã icon validate"
        );
        boolean isButtonEnabled = loginPage.isContinueButtonEnabled();
        softAssert.assertFalse(
                isButtonEnabled,
                "‚ùå N√∫t Ti·∫øp t·ª•c b·ªã disabled",
                "‚úÖ N√∫t Ti·∫øp t·ª•c enabled"
        );

        boolean exists = PhoneValidator.isPhoneNumberRegistered(validPhone);
        if (exists) {
            System.out.println("üì± T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i");
        } else {
            System.out.println("üÜï T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω");
        }

        softAssert.assertAllWithLog();
    }

    @Test
    public void testValidEmail() {
        String validEmail = DataGenerator.generateValidEmail();
        softAssert.logInputData(validEmail);

        loginPage.focusInputField();
        loginPage.enterLoginInput(validEmail);
        loginPage.tapOutsideInput();

        boolean errorDisplayed = loginPage.isErrorDisplayed();
        softAssert.assertFalse(
                errorDisplayed,
                "‚ùå C√≥ hi·ªÉn th·ªã l·ªói",
                "‚úÖ Kh√¥ng hi·ªÉn th·ªã l·ªói"
        );

        boolean isIconShown = loginPage.isSuccessIconDisplayed();
        softAssert.assertTrue(
                isIconShown,
                "‚ùå Kh√¥ng hi·ªÉn th·ªã icon validate",
                "‚úÖ Hi·ªÉn th·ªã icon validate"
        );
        boolean isButtonEnabled = loginPage.isContinueButtonEnabled();
        softAssert.assertTrue(
                isButtonEnabled,
                "‚ùå N√∫t Ti·∫øp t·ª•c b·ªã disabled",
                "‚úÖ N√∫t Ti·∫øp t·ª•c enabled"
        );

        softAssert.assertAllWithLog();
    }
}
